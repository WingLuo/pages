<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorials on LuoYong&#39;s Blog</title>
    <link>https://bootloader.cn/tags/tutorials/</link>
    <description>Recent content in Tutorials on LuoYong&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 05 Jan 2018 10:35:27 +0800</lastBuildDate>
    
	<atom:link href="https://bootloader.cn/tags/tutorials/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hugo in Github Pages</title>
      <link>https://bootloader.cn/hugo-in-github-pages/</link>
      <pubDate>Fri, 05 Jan 2018 10:35:27 +0800</pubDate>
      
      <guid>https://bootloader.cn/hugo-in-github-pages/</guid>
      <description>这是第一篇自己的博客,讲述使用github pages和hugo创建自己的个人博客的教程,说实话,经历两天的摸索,终于能够使用简单的操作,将自己写的markdown上传到博客上. 这里讲一下事情的原委: 之前在阿里云上面注册了一个域名bootloader.cn,但是我却不知道有什么用,2018年伊始,郭神的博客推送了一片免费创建个人博客网站的文章,我觉得是时候对自我进行一个投资了(之前看书的时候就有人建议过,作为程序员,要树立自己的品牌形象,让更多的人了解你),当然,在技术行业,也要具有分享精神.当我搭建完自己的博客后,我决定将我的搭建过程分享出来,给大家参考.
 首先,你需要一个github的账号.账号肯定是在github.com官网上注册咯.但是我相信,每一个技术人员都有一个自己的github账号.(注册流程我就不说了)
 在自己github上new repository,可以是一个项目比如project,也可以是&amp;lt;UerName&amp;gt;.github.io其中&amp;lt;UerName&amp;gt;要一起替换掉自己的github名称.当你创建&amp;lt;UerName&amp;gt;.github.io的一个repository的时候,只需要在&amp;lt;UerName&amp;gt;.github.io根目录下面放上一个index.html,就可以通过htps://&amp;lt;UerName&amp;gt;.github.io来进行访问了;
 如果你想最简单的创建自己的博客网站,那么fork一下jekyll- now,然后Settings&amp;ndash;&amp;gt;Repository name 改为&amp;lt;UerName&amp;gt;.github.io&amp;ndash;&amp;gt;RENAME;Settings&amp;ndash;&amp;gt;GitHub Pages&amp;ndash;&amp;gt;Source&amp;ndash;&amp;gt;master branch;Code&amp;ndash;&amp;gt;_config.yml&amp;ndash;&amp;gt;Edit This File;按照需求修改,现在你就可以通过htps://&amp;lt;UerName&amp;gt;.github.io访问你的博客了,当然你后续的要上传的文章,需要写成.md(markdown)的文件上传到_posts文件夹下面github会自动帮你生成.本文是Hugo的文章,所以这里就简单的介绍了一下jekyll
 安装Hugo, 英文版的教程,看着头大,还好有google翻译,整个流程是:新建Hugo的文件夹(在你想要放置hugo的任意位置),在Hugo文件夹下面新建bin和Seits文件夹,下载对应的Hugo发行版,将文件解压到bin文件夹下面,将可执行文件更名为hugo.exe,设置环境变量Path添加路径指向到bin文件夹,打开控制台,输入hugo help,显示
  hugo is the main command, used to build your Hugo site. Hugo is a Fast and Flexible Static Site Generator built with love by spf13 and friends in Go. Complete documentation is available at https://gohugo.io/.  说明hugo安装成功了,如果失败,请参照Hugo安装文档
 安装Git,我是用的windows系统,并且下载的是Git for Windows Portable（“thumbdrive edition”）版本,解压到你想要的路径,然后配置环境变量中Path添加路径指向到Git安装路径的bin文件夹,打开控制台,输入git,如果出现  usage: git [--version] [--help] [-C &amp;lt;path&amp;gt;] [-c name=value] [--exec-path[=&amp;lt;path&amp;gt;]] [--html-path] [--man-path] [--info-path] [-p | --paginate | --no-pager] [--no-replace-objects] [--bare] [--git-dir=&amp;lt;path&amp;gt;] [--work-tree=&amp;lt;path&amp;gt;] [--namespace=&amp;lt;name&amp;gt;] &amp;lt;command&amp;gt; [&amp;lt;args&amp;gt;] These are common Git commands used in various situations: start a working area (see also: git help tutorial) clone Clone a repository into a new directory init Create an empty Git repository or reinitialize an existing one work on the current change (see also: git help everyday) add Add file contents to the index mv Move or rename a file, a directory, or a symlink reset Reset current HEAD to the specified state rm Remove files from the working tree and from the index examine the history and state (see also: git help revisions) bisect Use binary search to find the commit that introduced a bug grep Print lines matching a pattern log Show commit logs show Show various types of objects status Show the working tree status grow, mark and tweak your common history branch List, create, or delete branches checkout Switch branches or restore working tree files commit Record changes to the repository diff Show changes between commits, commit and working tree, etc merge Join two or more development histories together rebase Reapply commits on top of another base tip tag Create, list, delete or verify a tag object signed with GPG collaborate (see also: git help workflows) fetch Download objects and refs from another repository pull Fetch from and integrate with another repository or a local branch push Update remote refs along with associated objects &#39;git help -a&#39; and &#39;git help -g&#39; list available subcommands and some concept guides.</description>
    </item>
    
  </channel>
</rss>